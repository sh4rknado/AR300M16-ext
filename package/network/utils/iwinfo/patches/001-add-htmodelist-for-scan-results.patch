--- a/include/iwinfo.h
+++ b/include/iwinfo.h
@@ -177,6 +177,7 @@ struct iwinfo_scanlist_entry {
 	uint8_t signal;
 	uint8_t quality;
 	uint8_t quality_max;
+	uint16_t htmodelist;
 	struct iwinfo_crypto_entry crypto;
 };
 
--- a/iwinfo_cli.c
+++ b/iwinfo_cli.c
@@ -581,7 +581,7 @@ static void print_info(const struct iwin
 
 static void print_scanlist(const struct iwinfo_ops *iw, const char *ifname)
 {
-	int i, x, len;
+	int i, h, x, len;
 	char buf[IWINFO_BUFSIZE];
 	struct iwinfo_scanlist_entry *e;
 
@@ -612,8 +612,17 @@ static void print_scanlist(const struct
 			format_signal(e->signal - 0x100),
 			format_quality(e->quality),
 			format_quality_max(e->quality_max));
-		printf("          Encryption: %s\n\n",
+		printf("          Encryption: %s\n",
 			format_encryption(&e->crypto));
+		if (e->htmodelist)
+		{
+			printf("          HT Capabilities: ");
+			for (h = 0; h < ARRAY_SIZE(IWINFO_HTMODE_NAMES); h++)
+				if (e->htmodelist & (1 << h))
+					printf("%s ", IWINFO_HTMODE_NAMES[h]);
+			printf("\n");
+		}
+		printf("\n");
 	}
 }
 
--- a/iwinfo_lua.c
+++ b/iwinfo_lua.c
@@ -384,7 +384,7 @@ static int iwinfo_L_txpwrlist(lua_State
 /* Wrapper for scan list */
 static int iwinfo_L_scanlist(lua_State *L, int (*func)(const char *, char *, int *))
 {
-	int i, x, len = 0;
+	int i, x, h, len = 0;
 	char rv[IWINFO_BUFSIZE];
 	char macstr[18];
 	const char *ifname = luaL_checkstring(L, 1);
@@ -438,6 +438,18 @@ static int iwinfo_L_scanlist(lua_State *
 			iwinfo_L_cryptotable(L, &e->crypto);
 			lua_setfield(L, -2, "encryption");
 
+			/* HT Modes */
+			if (e->htmodelist)
+			{
+				lua_newtable(L);
+				for (h = 0; h < ARRAY_SIZE(IWINFO_HTMODE_NAMES); h++)
+				{
+					lua_pushboolean(L, e->htmodelist & (1 << h));
+					lua_setfield(L, -2, IWINFO_HTMODE_NAMES[h]);
+				}
+				lua_setfield(L, -2, "htmodelist");
+			}
+
 			lua_rawseti(L, -2, x);
 		}
 	}
--- a/iwinfo_nl80211.c
+++ b/iwinfo_nl80211.c
@@ -2274,6 +2274,73 @@ struct nl80211_scanlist {
 	int len;
 };
 
+static void nl80211_parse_ht_capa(struct iwinfo_scanlist_entry *e,
+								  unsigned char *ie,
+								  int len)
+{
+	int capa;
+	if (len < 2)
+		return;
+	e->htmodelist |= IWINFO_HTMODE_HT20;
+	capa = ie[0] | (ie[8] << 8);
+	if (capa & (1 << 1))
+	{
+		e->htmodelist |= IWINFO_HTMODE_HT40;
+		if (e->htmodelist & IWINFO_HTMODE_VHT20)
+			e->htmodelist |= IWINFO_HTMODE_VHT40;
+	}
+}
+
+static void nl80211_parse_vht_capa(struct iwinfo_scanlist_entry *e,
+								   unsigned char *ie,
+								   int len)
+{
+	int capa;
+	if (len < 4)
+		return;
+	capa = ie[0] | (ie[1] << 8) | (ie[2] << 16) | (ie[3] << 24);
+
+	e->htmodelist |= IWINFO_HTMODE_VHT20;
+	if (e->htmodelist & IWINFO_HTMODE_HT40)
+		e->htmodelist |= IWINFO_HTMODE_VHT40;
+
+	switch ((capa >> 2) & 3) {
+	/*case 0: neither 160 nor 80+80 */
+	case 1:
+		e->htmodelist |= IWINFO_HTMODE_VHT160;
+		break;
+	case 2:
+		e->htmodelist |= IWINFO_HTMODE_VHT80_80;
+		break;
+	}
+}
+
+static void nl80211_parse_vht_oper(struct iwinfo_scanlist_entry *e,
+								   unsigned char *ie,
+								   int len)
+{
+	int chanwidth;
+	if (len < 1)
+		return;
+	chanwidth = ie[0];
+
+	e->htmodelist |= IWINFO_HTMODE_VHT20;
+	if (e->htmodelist & IWINFO_HTMODE_HT40)
+		e->htmodelist |= IWINFO_HTMODE_VHT40;
+
+	switch (chanwidth) {
+	/*case 0: 20 or 40 MHz */
+	case 1:
+		e->htmodelist |= IWINFO_HTMODE_VHT80;
+		break;
+	case 2:
+		e->htmodelist |= IWINFO_HTMODE_VHT160;
+		break;
+	case 3:
+		e->htmodelist |= IWINFO_HTMODE_VHT80_80;
+		break;
+	}
+}
 
 static void nl80211_get_scanlist_ie(struct nlattr **bss,
                                     struct iwinfo_scanlist_entry *e)
@@ -2296,11 +2363,23 @@ static void nl80211_get_scanlist_ie(stru
 			}
 			break;
 
+		case 45: /* HT Capabilities */
+			nl80211_parse_ht_capa(e, ie + 2, ie[1]);
+			break;
+
 		case 48: /* RSN */
 			iwinfo_parse_rsn(&e->crypto, ie + 2, ie[1],
 			                 IWINFO_CIPHER_CCMP, IWINFO_KMGMT_8021x);
 			break;
 
+		case 191: /* VHT Capabilities */
+			nl80211_parse_vht_capa(e, ie + 2, ie[1]);
+			break;
+
+		case 192: /* VHT Operation */
+			nl80211_parse_vht_oper(e, ie + 2, ie[1]);
+			break;
+
 		case 221: /* Vendor */
 			if (ie[1] >= 4 && !memcmp(ie + 2, ms_oui, 3) && ie[5] == 1)
 				iwinfo_parse_rsn(&e->crypto, ie + 6, ie[1] - 4,
